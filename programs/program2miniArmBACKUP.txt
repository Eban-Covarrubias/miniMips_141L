mov r0 8 //Set min and max MSB and LSB
shift r0 -3 //64
mov r1 0
sub1 r1 // set r1=1111111_1111111
str r1 r0 2 //store minMSB in 66
str r1 r0 3 //store minLSB in 67
mov r1 4
add r0 r1 //r0 = 68
mov r1 0
str r1 r0 0 //store maxMSB in 68
str r1 r0 1 //store maxLSB in 69
str r1 r0 2 //i = 0 //Use memory slot 70 and 71 for i and j
ldr r1 r0 2//get value of i (NOTE r0=68 from the for loop or from fall thru) //SETTING j = i+2
add2 r1
str r1 r0 3 //j = i+2
mov r1 8 //INSIDE J LOOP
shift r1 -4 //create sign mask
ldr r2 r0 2 //r2 holds I
ldr r3 r0 3 //r3 holds j
ldr r2 r2 0 //r2 holds arr[i]
ldr r3 r3 0 //r3 holds arr[j]
and r2 r2 r1 //signA
and r3 r3 r1 //signB
cmp r2 r3 //compare sign bits //gen jump number using r3 and r2
mov r3 12
shift r3 -3 //12*8=96
mov r2 10 //
add r3 r2 //r3=96+10=106
bne r3 //if signA != signB skip down 106 lines to line #135
add2 r0 //r0=70 IF THE SIGNS ARE EQUAL: //GOAL: subtract (16 bit subtraction) one from the other
ldr r1 r0 1 //load in r1=j
ldr r1 r1 1 //load in mem[j+1]
mov r0 0
sub1 r0 //setting r0=11111111
xor r1 r0 r1 //flip all bits
mov r3 8
shift r3 -2 //32
add1 r1 //flipped sign of mem[j+1]
bof r3 //if we have overflow, branch to overflow error handling
mov r0 9//we still need to see if adding mem[i+1] causes overflow, preserve r1
shift r0 -3//72
sub1 r0
sub1 r0 //r0=70
ldr r0 r0 0 //r0 = i
ldr r0 r0 1 //mem[i+1]
mov r2 5
shift r2 -2 //20
add1 r2 //r2=21
add r1 r0 //finish adding and check for overflow
bof r2  //if we have overflow, branch to overflow error handling
mov r0 8 //if we have no overflow
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 0 //load in r1=mem[j]
ldr r2 r2 0 //load in r2=mem[i]
mov r3 0
sub1 r3 //setting r3=11111111
xor r1 r1 r3 //flip mem[j]
add r2 r1 // CHECK BACK HERE IN A fEW MINUTES IF WE FIND NO OTHER POSSIBLE ERRORS***
mov r1 0 //r1 will hold our overflow bit, assume that we have overflow ////////////////////ASSMUME THAT OVERFLOW NEVER HAPPENS ON MSB ////////////////////////////////////////////////////////////// CHANGE THIS
mov r3 2 //r3 will hold jump length
bof r3  //if there is overflow, skip the overflow bit removal
mov r1 0
add r2 r1 //add the overflow bit
str r2 r0 2 //mem[72]=result, aka diffMSB
mov r0 15
b r0 //Forced branch to prevent fall thru
mov r0 8 //if we have an overflow error
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 0 //load in r1=mem[j]
ldr r2 r2 0 //load in r2=mem[i]
mov r3 0
sub1 r3 //setting r3=11111111
xor r1 r1 r3
add1 r1 //flip mem[j]+1
add r2 r1 //r2=diffMSB
str r2 r0 2 //mem[72]=result, aka diffMSB
mov r0 8 //Run By both regardless of overflow (this is branched to)
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 1 //load in r1=mem[j+1]
ldr r2 r2 1 //load in r2=mem[i+1]
mov r3 0
sub1 r3 //setting r3=11111111 //our most recent change
xor r1 r1 r3
add1 r1 //flipped sign of mem[j+1] + 1
add r1 r2 //r1 = mem[i+1]+mem[j+1] = diffLSB
ldr r2 r0 2//load r2=mem[72] this is loading in diffMSB
abs r2 r1 //get abs value of diffMSB, diffLSB
copy r2 r1 //Needed to finish abs value in hardware
str r1 r0 3//store new diffLSB
str r2 r0 2//store new diffMSB//Done signs are Equal //fall thru into min/max helper function call
mov r0 14
shift r0 -2//r0=56
add2 r0 //r0 = 58
b r0//HELPER function, UPDATE min and max  (branch to line ~152)
mov r0 8 //INNER LOOP IF J<64 
shift r0 -3 //r0 = 64
mov r2 4
add r0 r2 //r0 = 68
ldr r1 r0 3 //load r1=j
add2 r1
str r1 r0 3 //j+=2 update j
shift r2 -4 //r2=64
sub1 r2 //r2=63
sub1 r2 //r2=62
cmp r1 r2 // compare j to 62
mov r3 14
shift r3 -3//112
mov r1 6
sub r1 r3//r1= 6-112 =-106
ble r1//LOOP if j <= 62 // to line 16 
ldr r1 r0 2 //load r1=i //OUTERLOOP IF I<62 
add2 r1
str r1 r0 2 //update i+=2
cmp r1 r2 //r2 will already be 62 since the only way to get here is fallthru from loop j
mov r3 15 //make sure to preserve r0
shift r3 -3 //120
mov r1 2
sub r1 r3 //r1 = 2-120 = -118 
blt r1//LOOP if i < -118 go up to line 13
mov r3 14 //DONE WITH PROGRAM
shift r3 -3//r3=0111000=112
b r3 //Prevent fall thru into helper function
mov r1 2//IF THE SIGNS ARE NOT EQUAL DO THIS: (From line ~28) //Helper function for when signs are not Equal
mov r0 9
shift r0 -3 //72
sub r0 r1 //r0=72-2=70
ldr r2 r0 0 //load in i
ldr r3 r2 0//load in arr[i] (msb)
ldr r2 r2 1 //load in arr[i+1] (lsb)
abs r3 r2 //get abs(arr[i].arr[i+1])
copy r3 r2 //update copy to abs2
add1 r0 //r0 = 71
ldr r1 r0 0//load in j
ldr r0 r0 0//load in j
ldr r1 r1 0//load in arr[j] (msb)
ldr r0 r0 1//load in arr[j+1] (lsb)
abs r1 r0 //get abs(arr[j].arr[j+1])
copy r1 r0 //update copy to abs2
add r0 r2 //this addition may have had overflow
mov r2 9
shift r2 -3 //72
str r0 r2 1 //diffLSB=mem[73]=result
mov r0 1 //r0 will be overflow bit, by default set to 1
mov r2 2
bof r2 //if we have overflow, leave r0 as 1
mov r0 0 //if no overflow, make overflow bit 0
add r1 r3 //add MSB
add r1 r0 //add overflow bit
mov r3 9
shift r3 -3//72
str r1 r3 0//diffMSB=mem[72] //fall thru into helper function to find min and max
mov r0 9 //Helper function Start, max updates first (from force branch on line ~119) ////////////////////////////////
mov r0 9 //Padding for easy jump
shift r0 -3 //r0=72
ldr r2 r0 0//load r2=diffMSB
mov r1 4
sub r0 r1 //r0=68
ldr r3 r0 0//load r3=maxMSB
cmp r2 r3 // compare diffMSB and maxMSB
mov r1 13
bgt r1//if diffMSB > maxLSB Force update
mov r1 15
add1 r1 //r1=16
blt r1 //skip to min if diffMSB<maxLSB, no update
ldr r1 r0 1//load r1=maxLSB = mem[69] //We fall thru here if diffMSB == maxLSB
mov r3 4
add r0 r3 //r0=72
ldr r3 r0 1 //load r3=diffLSB = mem[73]
cmp r3 r1 //generate flags by comparing diffLSB to maxLSB
mov r1 9
blt r1 //skip to min if diffLSB<maxLSB
mov r1 4
sub r0 r1 //r0=72-4=68 //fix r0 for fall thru
add2 r0 //68+2 = 70 //force upate goes here
ldr r3 r0 3 //r3 = mem[73]=diffLSB
sub1 r0
sub1 r0 //r0=68
str r3 r0 1//update maxLSB==mem[69]=diffLSB
str r2 r0 0//update maxMSB==mem[68]=diffMSB
mov r0 8//min updates ////////////////////
shift r0 -3//r0=64
ldr r1 r0 2//load r1=minMSB=mem[66]
cmp r2 r1// diffMSB vs minMSB
add2 r0 //r0 = 66
mov r3 13
blt r3 //force an update if diffMSB < minMSB, move to line 190
mov r3 15
add1 r3 //r3=16
bgt r3 //skip if diffMSB > minMSB, no update, move to line 196
ldr r3 r0 1//r3=minLSB load in and compare minLSB and diffLSB, this is case where diffMSB == minMSB
mov r1 4
add r0 r1//r0=66+4=70
ldr r1 r0 3//r1=mem[73]=diffLSB
cmp r1 r3 // diffLSB vs minLSB
mov r3 9
bgt r3//skip if diffLSB > minLSB
mov r3 4 
sub r0 r3//r0=66
mov r3 4 //Force min update branches here
add r0 r3//r0=66+4=70
ldr r1 r0 3//r1=diffLSB=mem[73]
sub r0 r3 //r0=70-4=66
str r1 r0 1//update minLSB=diffLSB
str r2 r0 0//update minMSB=diffMSB
mov r0 15 //initializing the branching back up to main
shift r0 -3//120
mov r1 6
sub r1 r0//r1=6-120=-114
b r1//Branch back up to main (up to line ~107)