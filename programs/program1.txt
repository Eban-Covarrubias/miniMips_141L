Hamming distance:

LIST of REQ Ops( and, sub, add, xor, branch) or (hamDIST, algDist, GreaterTHN, LessTHN, Branch)
Def: the number of bits between two strings that differ

example:
1001001
1011010

= 3 out of 8.
This can be solved using bitwise xor and adding the number of 1s that we get.

note: 1^1 = 0 and 0^0 = 0. The only time output = 1 is when the two inputs are different.

The correlation is always the number of bits minus the hamming distance.

In this case 5 / 8.


Program 1
Closest and farthest Hamming pairs -- Write a program to find the least and greatest Hamming
distances among all pairs of values in an array of 32 two-byte half-words. Assume all values are
signed 16-bit (“half-word”) integers. The array of integers runs from data memory location 0 to 63.
Even-numbered addresses are MSBs, following odd addresses are LSBs, e.g. a concatenation of
addresses 0 and 1 forms a 16-bit two’s complement half-word. Write the minimum distance in
location 64 and the maximum in 65.

For question 1.
We are given 32 half world (16 bit) numbers. These are stored in addresses 0 up to 63. (each address slot is only able to store up to 8 bits). We will check the hamming distance between each possible pair using naive approach (O(n^2)) and then place the min distance in memory address 64 and the max in address 65.

For finding hamming distance, use sum(lrs((input1 xor input2) and mask))

ex:

110101 <input A
010000 <input B
Goal: hamming distance = 3
A xor B = 100101

sum = 0
100101
000001
sum += 000001

010010
000001
sum+=000000

001001
000001
sum+=000001

000100
000001
sum+=000000

000010
000001
sum+=000000

000001
000001
sum+=000001
