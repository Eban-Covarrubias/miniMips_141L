Hamming distance:

LIST of REQ Ops( and, sub, add, xor, branch) or (hamDIST, algDist, GreaterTHN, LessTHN, Branch)
Def: the number of bits between two strings that differ

example:
1001001
1011010

= 3 out of 8.
This can be solved using bitwise xor and adding the number of 1s that we get.

note: 1^1 = 0 and 0^0 = 0. The only time output = 1 is when the two inputs are different.

The correlation is always the number of bits minus the hamming distance.

In this case 5 / 8.


Program 1
Closest and farthest Hamming pairs -- Write a program to find the least and greatest Hamming
distances among all pairs of values in an array of 32 two-byte half-words. Assume all values are
signed 16-bit (“half-word”) integers. The array of integers runs from data memory location 0 to 63.
Even-numbered addresses are MSBs, following odd addresses are LSBs, e.g. a concatenation of
addresses 0 and 1 forms a 16-bit two’s complement half-word. Write the minimum distance in
location 64 and the maximum in 65.

For question 1.
We are given 32 half world (16 bit) numbers. These are stored in addresses 0 up to 63. (each address slot is only able to store up to 8 bits). We will check the hamming distance between each possible pair using naive approach (O(n^2)) and then place the min distance in memory address 64 and the max in address 65.

//going to use r1 and r2 for holding arguments, and will hold smallest distance in r4 and largest in r5
//will use r3 to hold incrementing addresses
//also we will only use registers r0-r7 to minimize bit usage



mov r0, 0//store address 0 in r0
mov r3, 0 //store address 0 in r3
mov r4, 16’b 1111_1111_1111_1111 //store largest possible val in r4
mov r5, 16’b 0000_0000_0000_0000 //smallest possible val in r5mov r7, 1 //store the number 1 in r7 to use for incrementing


outerLoop:
ldr r1, r0 //load first number in pair
add r0, r0, r7 //increment outerPointer by 1
innerLoop:
add r3, r3, r7 //add 1 to r3
ldr r2, r3 //load from addresses 1 to 63
xor r6, r1, r2 // run xor on each pair
branchLessThan updateMin, r6, r4
backtoLoop:
branchIfLessThan innerLoop, r3, 64

branchIfLessThan outerLoop, r

updateMin