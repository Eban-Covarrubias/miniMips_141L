mov r0 0
mov r1 8 // 8
shift r1 -3 // 8*8 = 64
str r0 r1 1 //max dist set to 0 (memory slot 65)
mov r0 15 //15
shift r0 -1 //shift left by 1 to set r0 to 30
str r0 r1 0 //min dist set to 30 (mem slot 64)
mov r0 0 //SETTING I
str r0 r1 2 //store i val of 0 in 66
mov r0 8// 8//START OF INNER FOR LOOP, SET J
shift r0 -3 // 64
ldr r0 r0 2 //load in i
mov r1 2
add r0 r1 //hold j in r0
mov r1 8
shift r1 -3 // 64
str r0 r1 3 //begin with j = i+2
mov r0 0 //sum = 0 //INSIDE THE LOOP
mov r1 1 //mask = 00000001
mov r3 8
shift r3 -3 //r3 = 64
ldr r2 r3 2 //load in i
ldr r3 r3 3 //load in j
ldr r2 r2 0 //load in arr[i]
ldr r3 r3 0 //load in arr[j]
xor r2 r2 r3 //xor(arr[i], arr[j])
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit0
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit1
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit2
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit3
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit4
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit5
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit6
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit7
mov r3 8
shift r3 -3 //64
ldr r2 r3 2 //load in i
ldr r3 r3 3 //load in j
ldr r2 r2 1 //load in arr[i+1]
ldr r3 r3 1 //load in arr[j+1]
xor r2 r2 r3 //xor(arr[i+1], arr[j+1])
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit0
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit1
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit2
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit3
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit4
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit5
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit6
shift r2 1
and r3 r2 r1 //and(part, mask)
add r0 r3//sum += and(part, mask)//check bit7, sum = r0
mov r3 8 //at this point sum = r0 = 1000
shift r3 -3 // 64 = 1000000
ldr r1 r3 1 //load in max = r1
mov r2 2
cmp r0 r1
blt r2 //skip update if sum < max
str r0 r3 1 //update max = sum
ldr r1 r3 0 //load in min = r1
cmp r1 r0
blt r2//skip update if min < sum
str r0 r3 0 //update min = sum
mov r1 8 //INNER FOR LOOP ON J
shift r1 -3 // r1 = 64
ldr r0 r1 3 //load in j from slot 67
mov r3 2 //r3 = 2
add r0 r3
str r0 r1 3 //j += 2
mov r3 11
shift r3 -3 //88
mov r2 4
sub r2 r3 // 4 - 88 = -84
cmp r0 r1
blt r2//branch -84 lines (up 84 lines) if j<64 
mov r1 8 //OUTER FOR LOOP ON I
shift r1 -3 // r1 = 64
ldr r0 r1 2 //load in i from slot 66
add2 r0
str r0 r1 2 //i += 2 
mov r3 13
shift r3 -3 //get 104
mov r2 1
sub r2 r3 //r3 = 1 - 104 = -103
cmp r0 r1
blt r2//branch -103 lines (up 103 lines) if i<64 
NOP //FINISHED program 1, raise done flag on NOP
mov r0 8 //Set min and max MSB and LSB //START of program 2
shift r0 -3 //64
mov r1 0
sub1 r1 // set r1=1111111_1111111
str r1 r0 2 //store minMSB in 66
str r1 r0 3 //store minLSB in 67
mov r1 4
add r0 r1 //r0 = 68
mov r1 0
str r1 r0 0 //store maxMSB in 68
str r1 r0 1 //store maxLSB in 69
str r1 r0 2 //i = 0 //Use memory slot 70 and 71 for i and j
ldr r1 r0 2//get value of i (NOTE r0=68 from the for loop or from fall thru) //SETTING j = i+2
add2 r1
str r1 r0 3 //j = i+2
mov r1 8 //INSIDE J LOOP
shift r1 -4 //create sign mask
ldr r2 r0 2 //r2 holds I
ldr r3 r0 3 //r3 holds j
ldr r2 r2 0 //r2 holds arr[i]
ldr r3 r3 0 //r3 holds arr[j]
and r2 r2 r1 //signA
and r3 r3 r1 //signB
cmp r2 r3 //compare sign bits //gen jump number using r3 and r2
mov r3 12
shift r3 -3 //12*8=96
mov r2 10 //
add r3 r2 //r3=96+10=106
bne r3 //if signA != signB skip down 106 lines to line #135
add2 r0 //r0=70 IF THE SIGNS ARE EQUAL: //GOAL: subtract (16 bit subtraction) one from the other
ldr r1 r0 1 //load in r1=j
ldr r1 r1 1 //load in mem[j+1]
mov r0 0
sub1 r0 //setting r0=11111111
xor r1 r0 r1 //flip all bits
mov r3 8
shift r3 -2 //32
add1 r1 //flipped sign of mem[j+1]
bof r3 //if we have overflow, branch to overflow error handling
mov r0 9//we still need to see if adding mem[i+1] causes overflow, preserve r1
shift r0 -3//72
sub1 r0
sub1 r0 //r0=70
ldr r0 r0 0 //r0 = i
ldr r0 r0 1 //mem[i+1]
mov r2 5
shift r2 -2 //20
add1 r2 //r2=21
add r1 r0 //finish adding and check for overflow
bof r2  //if we have overflow, branch to overflow error handling
mov r0 8 //if we have no overflow
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 0 //load in r1=mem[j]
ldr r2 r2 0 //load in r2=mem[i]
mov r3 0
sub1 r3 //setting r3=11111111
xor r1 r1 r3 //flip mem[j]
add r2 r1 // CHECK BACK HERE IN A fEW MINUTES IF WE FIND NO OTHER POSSIBLE ERRORS***
mov r1 0 //r1 will hold our overflow bit, assume that we have overflow ////////////////////ASSMUME THAT OVERFLOW NEVER HAPPENS ON MSB ////////////////////////////////////////////////////////////// CHANGE THIS
mov r3 2 //r3 will hold jump length
bof r3  //if there is overflow, skip the overflow bit removal
mov r1 0
add r2 r1 //add the overflow bit
str r2 r0 2 //mem[72]=result, aka diffMSB
mov r0 15
b r0 //Forced branch to prevent fall thru
mov r0 8 //if we have an overflow error
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 0 //load in r1=mem[j]
ldr r2 r2 0 //load in r2=mem[i]
mov r3 0
sub1 r3 //setting r3=11111111
xor r1 r1 r3
add1 r1 //flip mem[j]+1
add r2 r1 //r2=diffMSB
str r2 r0 2 //mem[72]=result, aka diffMSB
mov r0 8 //Run By both regardless of overflow (this is branched to)
shift r0 -3 //64
mov r1 6
add r0 r1//r0=70
ldr r1 r0 1 //load in r1=j
ldr r2 r0 0 //load in r2=i
ldr r1 r1 1 //load in r1=mem[j+1]
ldr r2 r2 1 //load in r2=mem[i+1]
mov r3 0
sub1 r3 //setting r3=11111111 //our most recent change
xor r1 r1 r3
add1 r1 //flipped sign of mem[j+1] + 1
add r1 r2 //r1 = mem[i+1]+mem[j+1] = diffLSB
ldr r2 r0 2//load r2=mem[72] this is loading in diffMSB
abs r2 r1 //get abs value of diffMSB, diffLSB
copy r2 r1 //Needed to finish abs value in hardware
str r1 r0 3//store new diffLSB
str r2 r0 2//store new diffMSB//Done signs are Equal //fall thru into min/max helper function call
mov r0 14
shift r0 -2//r0=56
add2 r0 //r0 = 58
b r0//HELPER function, UPDATE min and max  (branch to line ~152)
mov r0 8 //INNER LOOP IF J<64 
shift r0 -3 //r0 = 64
mov r2 4
add r0 r2 //r0 = 68
ldr r1 r0 3 //load r1=j
add2 r1
str r1 r0 3 //j+=2 update j
shift r2 -4 //r2=64
sub1 r2 //r2=63
sub1 r2 //r2=62
cmp r1 r2 // compare j to 62
mov r3 14
shift r3 -3//112
mov r1 6
sub r1 r3//r1= 6-112 =-106
ble r1//LOOP if j <= 62 // to line 16 
ldr r1 r0 2 //load r1=i //OUTERLOOP IF I<62 
add2 r1
str r1 r0 2 //update i+=2
cmp r1 r2 //r2 will already be 62 since the only way to get here is fallthru from loop j
mov r3 15 //make sure to preserve r0
shift r3 -3 //120
mov r1 2
sub r1 r3 //r1 = 2-120 = -118 
blt r1//LOOP if i < -118 go up to line 13
mov r3 11 //DONE WITH PROGRAM
shift r3 -3//r3=0111000=88
b r3 //Prevent fall thru into helper function, jump to return (NOP)
mov r1 2//IF THE SIGNS ARE NOT EQUAL DO THIS: (From line ~28) //Helper function for when signs are not Equal
mov r0 9
shift r0 -3 //72
sub r0 r1 //r0=72-2=70
ldr r2 r0 0 //load in i
ldr r3 r2 0//load in arr[i] (msb)
ldr r2 r2 1 //load in arr[i+1] (lsb)
abs r3 r2 //get abs(arr[i].arr[i+1])
copy r3 r2 //update copy to abs2
add1 r0 //r0 = 71
ldr r1 r0 0//load in j
ldr r0 r0 0//load in j
ldr r1 r1 0//load in arr[j] (msb)
ldr r0 r0 1//load in arr[j+1] (lsb)
abs r1 r0 //get abs(arr[j].arr[j+1])
copy r1 r0 //update copy to abs2
add r0 r2 //this addition may have had overflow
mov r2 9
shift r2 -3 //72
str r0 r2 1 //diffLSB=mem[73]=result
mov r0 1 //r0 will be overflow bit, by default set to 1
mov r2 2
bof r2 //if we have overflow, leave r0 as 1
mov r0 0 //if no overflow, make overflow bit 0
add r1 r3 //add MSB
add r1 r0 //add overflow bit
mov r3 9
shift r3 -3//72
str r1 r3 0//diffMSB=mem[72] //fall thru into helper function to find min and max
mov r0 9 //Helper function Start, max updates first (from force branch on line ~119) ////////////////////////////////
mov r0 9 //Padding for easy jump
shift r0 -3 //r0=72
ldr r2 r0 0//load r2=diffMSB
mov r1 4
sub r0 r1 //r0=68
ldr r3 r0 0//load r3=maxMSB
cmp r2 r3 // compare diffMSB and maxMSB
mov r1 13
bgt r1//if diffMSB > maxLSB Force update
mov r1 15
add1 r1 //r1=16
blt r1 //skip to min if diffMSB<maxLSB, no update
ldr r1 r0 1//load r1=maxLSB = mem[69] //We fall thru here if diffMSB == maxLSB
mov r3 4
add r0 r3 //r0=72
ldr r3 r0 1 //load r3=diffLSB = mem[73]
cmp r3 r1 //generate flags by comparing diffLSB to maxLSB
mov r1 9
blt r1 //skip to min if diffLSB<maxLSB
mov r1 4
sub r0 r1 //r0=72-4=68 //fix r0 for fall thru
add2 r0 //68+2 = 70 //force upate goes here
ldr r3 r0 3 //r3 = mem[73]=diffLSB
sub1 r0
sub1 r0 //r0=68
str r3 r0 1//update maxLSB==mem[69]=diffLSB
str r2 r0 0//update maxMSB==mem[68]=diffMSB
mov r0 8//min updates ////////////////////
shift r0 -3//r0=64
ldr r1 r0 2//load r1=minMSB=mem[66]
cmp r2 r1// diffMSB vs minMSB
add2 r0 //r0 = 66
mov r3 13
blt r3 //force an update if diffMSB < minMSB, move to line 190
mov r3 15
add1 r3 //r3=16
bgt r3 //skip if diffMSB > minMSB, no update, move to line 196
ldr r3 r0 1//r3=minLSB load in and compare minLSB and diffLSB, this is case where diffMSB == minMSB
mov r1 4
add r0 r1//r0=66+4=70
ldr r1 r0 3//r1=mem[73]=diffLSB
cmp r1 r3 // diffLSB vs minLSB
mov r3 9
bgt r3//skip if diffLSB > minLSB
mov r3 4 
sub r0 r3//r0=66
mov r3 4 //Force min update branches here
add r0 r3//r0=66+4=70
ldr r1 r0 3//r1=diffLSB=mem[73]
sub r0 r3 //r0=70-4=66
str r1 r0 1//update minLSB=diffLSB
str r2 r0 0//update minMSB=diffMSB
mov r0 15 //initializing the branching back up to main
shift r0 -3//120
mov r1 6
sub r1 r0//r1=6-120=-114
b r1//Branch back up to main (up to line ~107)
NOP //raise done flag, FINISHED PROGRAM 2
mov r1 8 //let mem[128]=carry, mem[129]=i, mem[130]=j, mem[131]=shiftingOpA, mem[132]=shiftingOpB
shift r1 -4 //128
mov r0 0
str r0 r1 1//set i = 0 mem[129] = 0
mov r1 8 //OUTER LOOP BACK UP TO HERE
shift r1 -4 //128
ldr r1 r1 1//load r1 = i = mem[129]
mov r0 0//r0=0
mov r3 8
shift r3 -3//r3=64
add r1 r3 //r1 = i+64
str r0 r1 0 //    mem[i+64] = 0;
str r0 r1 1 //    mem[i+65] = 0;
str r0 r1 2 //    mem[i+66] = 0;
str r0 r1 3 //    mem[i+67] = 0;
mov r1 8 //Intialize values for #1st J loop 
shift r1 -4 //128
mov r0 0
str r0 r1 0//set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i 
ldr r0 r0 1//r0=mem[i+1]
str r0 r1 3//set shiftingOpA == mem[131] = mem[i+1] //Intialize as Alo
add1 r1 //r1 = 129
ldr r0 r1 0//r0=i
ldr r0 r0 3//r0=mem[i+3]
str r0 r1 3//set shiftingOpB ==  mem[132]= mem[i+3] //Intialize as Blo
mov r1 8 //First J loop for solving resltLowlo1 #1st J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 1 //Create the mask
and r3 r2 r0 //Get the far right bit of shiftingOpA
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 3//r1=mem[i+67] 
add r0 r1//mem[i+67] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 3//Update mem[i+67] = (mem[i+67] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 1 //R3 = shiftingOpA >> 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 -1 //r3 = shiftingOpB << 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 12
shift r2 -2 // r2=48
mov r0 0
sub r0 r2 //r0=-48
add2 r0 //r2=-46
blt r0//branch -46 lines (up 46 lines) if j<8 #end of 1st J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #1
mov r3 10 //Range extender hit
shift r3 -3 //80
mov r2 5
sub r2 r3 // r2 = 5 - 80 = -75
blt r2 //END of #Range extender 1, move up 75 lines 
mov r1 8 //Done with first quarter, Intialize values for #2nd J loop
shift r1 -4 //128
ldr r0 r1 0//r0 = carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3 //r2=i+64
str r0 r2 2//mem[i+66] = carry
mov r0 0
str r0 r1 0//Set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i
ldr r0 r0 1//r0=mem[i+1]
str r0 r1 3//set shiftingOpA = mem[i+1]
ldr r0 r1 1//load r0=i
ldr r0 r0 3//r0=mem[i+3]
shift r0 1 //r0 = Blo >> 1
add1 r1 //r1 = 129
str r0 r1 3//Update mem[132]==shiftingOpB =  Blo >> 1
mov r1 8 //First J loop for solving resltLowlo1 #2nd J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 8 //Create the mask
shift r2 -4 //r2=10000000
and r3 r2 r0 //Get the far left bit of shiftingOpA
shift r3 3 
shift r3 3
shift r3 1 //r3 >> 7 , in order to get the far left bit of shiftingOpA in slot 0
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 2//r1=mem[i+66] 
add r0 r1//mem[i+66] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 2//Update mem[i+66] = (mem[i+66] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 -1 //R3 = shiftingOpA << 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 1 //r3 = shiftingOpB >> 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 7
shift r2 -3 // r2=56
mov r0 7
sub r0 r2 //r0=7-56=-49
sub1 r0 //r0=-50
blt r0//branch -50 lines (up 50 lines) if j<8 #end of 2nd J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #2
mov r3 10 //Range extender hit
shift r3 -3 //80
mov r2 0
sub r2 r3 // r2 = 0 - 80 = -80
blt r2 //END of #Range extender 2, move up 80 lines
mov r1 8 //Intialize values for #3rd J loop initilize
shift r1 -4 //128
mov r0 0
str r0 r1 0//set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i 
ldr r0 r0 0//r0=mem[i]
str r0 r1 3//set shiftingOpA == mem[131] = mem[i] //Intialize as Alo
add1 r1 //r1=129
ldr r0 r1 0//r0=i
ldr r0 r0 3//r0=mem[i+3]
str r0 r1 3//set shiftingOpB ==  mem[132]= mem[i+3] //Intialize as Blo
mov r1 8 //First J loop for solving resltLowlo1 #3rd J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 1 //Create the mask
and r3 r2 r0 //Get the far right bit of shiftingOpA
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 2//r1=mem[i+66] 
add r0 r1//mem[i+66] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 2//Update mem[i+66] = (mem[i+66] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 1 //R3 = shiftingOpA >> 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 -1 //r3 = shiftingOpB << 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 12
shift r2 -2 // r2=48
mov r0 0
sub r0 r2 //r0=0-48=-48
add2 r0 //r0=-46
blt r0//branch -46 lines (up 46 lines) if j<8 #end of 3rd J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #3
mov r3 9 //Range extender hit
shift r3 -3 //72
mov r2 3
sub r2 r3 // r2 = 3 - 72 = -69
blt r2 //END of #Range extender 3, move up 69 lines 
mov r1 8 //Intialize values for #4th J loop
shift r1 -4 //128
ldr r0 r1 0//r0 = carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3//r2=i+64
str r0 r2 1//mem[i+65] = carry
mov r0 0
str r0 r1 0//Set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i
ldr r0 r0 0//r0=mem[i]
str r0 r1 3//set shiftingOpA = mem[i]
ldr r0 r1 1//load r0=i
ldr r0 r0 3//r0=mem[i+3]
shift r0 1 //r0 = Blo >> 1
add1 r1 //r1 = 129
str r0 r1 3//Update mem[132]==shiftingOpB =  Blo >> 1
mov r1 8 //First J loop for solving resltLowlo1 #4th J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 8 //Create the mask
shift r2 -4 //r2=10000000
and r3 r2 r0 //Get the far left bit of shiftingOpA
shift r3 3 
shift r3 3
shift r3 1 //r3 >> 7 , in order to get the far left bit of shiftingOpA in slot 0
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 1//r1=mem[i+65] 
add r0 r1//mem[i+65] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 1//Update mem[i+65] = (mem[i+65] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 -1 //R3 = shiftingOpA << 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 1 //r3 = shiftingOpB >> 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 13
shift r2 -2 // r2=52
mov r0 3
sub r0 r2 //r0=3-52=-49
sub1 r0 //r0=-50
blt r0//branch -50 lines (up 50 lines) if j<8 #end of 4th J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #4
mov r3 10 //Range extender hit
shift r3 -3 // 80
mov r2 0
sub r2 r3 // r2 = 0 - 80 = - 80
blt r2 //END of #Range extender 4, up 80 lines
mov r1 8 //Intialize values for #5th J loop 
shift r1 -4 //r1=128
mov r0 0
ldr r0 r1 0//Load in old carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3 //r2=i+64
str r0 r2 0// mem[i+64] = carry
mov r0 0
str r0 r1 0//set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i 
ldr r0 r0 1//r0=mem[i+1]
str r0 r1 3//set shiftingOpA == mem[131] = mem[i+1] //Intialize as Alo
add1 r1 //r1 = 129
ldr r0 r1 0//r0=i
ldr r0 r0 2//r0=mem[i+2]
str r0 r1 3//set shiftingOpB ==  mem[132]= mem[i+2] //Intialize as Blo
mov r1 8 //First J loop for solving resltLowlo1 #5th J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 1 //Create the mask
and r3 r2 r0 //Get the far right bit of shiftingOpA
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 2//r1=mem[i+66] 
add r0 r1//mem[i+66] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 2//Update mem[i+66] = (mem[i+66] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 1 //R3 = shiftingOpA >> 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 -1 //r3 = shiftingOpB << 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 12
shift r2 -2 // r2=48
mov r0 3
sub r0 r2 //r0=3-48=-45
sub1 r0 //r0=-45
blt r0//branch -46 lines (up 46 lines) if j<8 #end of 5th J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #5
mov r3 10 //Range extender hit
shift r3 -3 //80
mov r2 4
sub r2 r3 // r2 = 4 - 80 = -76
blt r2 //END of #Range extender 5, up 76 lines
mov r1 8 //Intialize values for #6th J loop
shift r1 -4 //128
ldr r0 r1 0//r0 = carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3 //r2=i+64
ldr r3 r2 1// r3 = mem[i+65]
add r0 r3 //r0 =  carry + mem[i+65]
mov r1 1 //be certain to preserve r0 and r2=(i+64), let r1 = overflow, for now assume overflow
mov r3 2 //jump distance
bof r3 //we must check for overflow here
mov r1 0 //if no overflow, delete overflow bit
ldr r3 r2 0//r3=mem[i+64]
add r3 r1 //r3=mem[i+64]+overflow
str r3 r2 0 //mem[i+64]=mem[i+64]+overflow
str r0 r2 1//mem[i+65] = carry + mem[i+65]
mov r1 8
shift r1 -4 //r1=128
mov r0 0
str r0 r1 0//Set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i
ldr r0 r0 1//r0=mem[i+1]
str r0 r1 3//set shiftingOpA = mem[i+1]
ldr r0 r1 1//load r0=i
ldr r0 r0 2//r0=mem[i+2]
shift r0 1 //r0 = Blo >> 1
add1 r1 //r1 = 129
str r0 r1 3//Update mem[132]==shiftingOpB =  Blo >> 1
mov r1 8 //First J loop for solving resltLowlo1 #6th J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 8 //Create the mask
shift r2 -4 //r2=10000000
and r3 r2 r0 //Get the far left bit of shiftingOpA
shift r3 3 
shift r3 3
shift r3 1 //r3 >> 7 , in order to get the far left bit of shiftingOpA in slot 0
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 1//r1=mem[i+65]
add r0 r1//mem[i+65] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 1//Update mem[i+65] = (mem[i+65] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 -1 //R3 = shiftingOpA << 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 1 //r3 = shiftingOpB >> 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 13
shift r2 -2 // r2=52
mov r0 1
sub r0 r2 //r0=1-52=-51
add1 r0 //r0=-50
blt r0//branch -50 lines (up 50 lines) if j<8 #end of 6th J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #6
mov r3 12 //Range extender hit
shift r3 -3 //96
mov r2 5
sub r2 r3 // r2 = 5 - 96 = -91 
blt r2 //END of #Range extender 6, up 91 lines
mov r1 8 //Intialize values for #7th J loop 
shift r1 -4 //r1=128
mov r0 0
ldr r0 r1 0//Load in r0= carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3 //r2=i+64
ldr r3 r2 0 //r3 = mem[i+64]
add r0 r3 //r0 = mem[i+64] + carry
str r0 r2 0// mem[i+64] = mem[i+64] + carry
mov r0 0
str r0 r1 0//set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i 
ldr r0 r0 0//r0=mem[i]
str r0 r1 3//set shiftingOpA == mem[131] = mem[i] //Intialize as Alo
add1 r1 //r1 = 129
ldr r0 r1 0//r0=i
ldr r0 r0 2//r0 = mem[i+2]
str r0 r1 3//set shiftingOpB ==  mem[132]= mem[i+2] //Intialize as Blo
mov r1 8 //First J loop for solving resltLowlo1 #7th J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 1 //Create the mask
and r3 r2 r0 //Get the far right bit of shiftingOpA
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 1//r1=mem[i+65] 
add r0 r1//mem[i+65] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 1//Update mem[i+65] = (mem[i+65] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 1 //R3 = shiftingOpA >> 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 -1 //r3 = shiftingOpB << 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 12
shift r2 -2 // r2=48
mov r0 3
sub r0 r2 //r0=3-48=-45
blt r0//branch -45 lines (up 45 lines) if j<8 #end of 7th J loop
cmp r2 r2 //force skip, r2 = r2 //#Range extender #7 
mov r3 10 //Range extender hit
shift r3 -3 //80
mov r2 3
sub r2 r3 // r2 = 3 - 80 = - 77
blt r2 //END of #Range extender 7, up 77 lines
mov r1 8 //Intialize values for #8th J loop
shift r1 -4 //128
ldr r0 r1 0//r0 = carry
ldr r3 r1 1//r3 = i
mov r2 8
shift r2 -3//64
add r2 r3 //r2=i+64
ldr r3 r2 0// r3 = mem[i+64]
add r0 r3 //r0 =  carry + mem[i+64]
str r0 r2 0//mem[i+64] = carry + mem[i+64]
mov r0 0
str r0 r1 0//Set carry = 0
str r0 r1 2//set j = 0
ldr r0 r1 1//load r0=i
ldr r0 r0 0//r0=mem[i]
str r0 r1 3//set shiftingOpA = mem[i]
ldr r0 r1 1//load r0=i
ldr r0 r0 2//r0=mem[i+2]
shift r0 1 //r0 = Blo >> 1
add1 r1 //r1 = 129
str r0 r1 3//Update mem[132]==shiftingOpB =  Blo >> 1
mov r1 8 //First J loop for solving resltLowlo1 #8th J Loop inner
shift r1 -4 //128
add2 r1 //130
ldr r0 r1 1//let r0=mem[131]=shiftingOpA
ldr r1 r1 2//let r1 = mem[132] = shiftingOpB
mov r2 8 //Create the mask
shift r2 -4 //r2=10000000
and r3 r2 r0 //Get the far left bit of shiftingOpA
shift r3 3 
shift r3 3
shift r3 1 //r3 >> 7 , in order to get the far left bit of shiftingOpA in slot 0
mov r2 0 //Determine if we are going to use the next shift or set to zero
sub r2 r3//subtract 1 or 0 based on the mask to get 11111111 or 00000000
and r0 r1 r2//r0 = shiftingOpB & with our 00000000 or 11111111
mov r2 8
shift r2 -4 //r2=128
ldr r2 r2 0//let r2=mem[128]=carry
add1 r2//let r2 = carry + 1, we assume carry=HIGH and deduct 1 if theres no overflow
mov r1 8
shift r1 -4 //r1=128
ldr r1 r1 1 //r1 = i = mem[129]
mov r3 8
shift r3 -3//r3=64
add r3 r1 //r3=i+64
ldr r1 r3 0//r1=mem[i+64]
add r0 r1//mem[i+64] += r0
mov r1 2
bof r1 //If we have overflow, continue
sub1 r2 //if we dont have overflow, deduct 1 from carry
str r0 r3 0//Update mem[i+64] = (mem[i+64] + r0)
mov r1 8
shift r1 -4 //r1=128
str r2 r1 0 //update carry = mem[128] = (r2)
ldr r0 r1 2 //load in r0=j from mem[130] //FOR LOOP ON J
add1 r0 //r0 = j + 1
str r0 r1 2 //Update Mem[130]=j + 1
ldr r3 r1 3//let r3=shiftingOpA
shift r3 -1 //R3 = shiftingOpA << 1
str r3 r1 3//Update Mem[131] = r3
add2 r1 //r1=130
ldr r3 r1 2 //let r3=shiftingOpB
shift r3 1 //r3 = shiftingOpB >> 1
str r3 r1 2 //Update mem[132] = r3
mov r1 8 //8
cmp r0 r1 //compare j to 8
mov r2 13
shift r2 -2 // r2=52
mov r0 3
sub r0 r2 //r0=3-52=-49
blt r0//branch -49 lines (up 49 lines) if j<8 #end of 8th J loop
mov r1 8 //For loop on I from 0 to 64 by increments of 4
shift r1 -4 //128
ldr r0 r1 1 //r0 = i
add2 r0
add2 r0 //r0= i + 4
str r0 r1 1 //Update i = i+4
mov r1 8
shift r1 -3 // r1 = 64
cmp r0 r1 // i vs 64
mov r3 12
shift r3 -3 = 96
mov r2 7
sub r2 r3 // r2 = -89
blt r2 //branch up -89 lines to extender if i < 64
NOP //FINISHED PROGRAM 3. NOP will raise done flag.