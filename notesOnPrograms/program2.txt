For question 2:
Input array is X half words (16 bit) signed numbers. We will find the arithmetic distances between all of the possible pairs and then place the minimum in address 66-67 and the maximum in address 68-69.

Note that because we are dealing with 2’s comp signed numbers, we can create a custom operation that finds distances. abs(A-B).

Say we have 1001 (-7) and 0010 (2). [2’s comp input]we are dealing with (9) = 1001 [unsigned ouput]

We can use a custom alg distance op, which checks the first bit to see if we have opposite sign.

(first check can be done using xor gate on the msb of inputs)
if(signs == opposite){
-convert both to positive unsigned representations 
(convert negatives):
1001 -> (1000) - (0001) = 0111
              (can be achieved using 1001 AND 1000) (can be achieved using 1001 AND 0111) (as taken from pa5 from cse 30 masking bits)
(lastly using SUB function)
(convert positives):
0010 -> 0010 (we dont need to do anything lol)
-add the two values
-that is our output
}
else{
-convert both to positive unsigned representations
-subtract the smaller of the two values from the larger
-return that as our output
}

1000_0000 = -128
0111_1111 = 127
difference = 255
message.txt
3 KB